[[fenv]]
fenv
----

NAME::
fenv - floating-point environment

SYNOPSIS::

[source,c]
---------------------
#include <fenv.h>

#define FE_DIVBYZERO
#define FE_INEXACT
#define FE_INVALID
#define FE_OVERFLOW
#define FE_UNDERFLOW
#define FE_ALL_EXCEPT  FE_DIVBYZERO | FE_INEXACT | \
                       FE_INVALID | FE_OVERFLOW |  \
                       FE_UNDERFLOW

#define FE_DOWNWARD    /* rounding towards negative infinity */
#define FE_TONEAREST   /* rounding towards nearest integer */
#define FE_TOWARDZERO  /* rounding towards zero */
#define FE_UPWARD      /* rounding towards positive infinity */

#define FE_DFL_ENV
---------------------

CONFORMING TO::
C99

DESCRIPTION::
The floating-point environment is the set of floating-point status flags and
control modes supported by the implementation. It is thread-local, each thread
inherits the initial state of its floating-point environment from the parent 
thread. Floating-point operations modify the floating-point status flags to
indicate abnormal results or auxiliary information. The state of floating-point
control modes affects the outcomes of some floating-point operations.

It defines the types `fenv_t` (the type representing the entire floating-point 
environment) and `fexcept_t` (the type representing all floating-point status 
flags collectively).

All the macro constants FE_DIVBYZERO, FE_INEXACT, FE_INVALID, FE_OVERFLOW, and
FE_UNDERFLOW expand to integer constant expressions that are distinct powers of
2, which uniquely identify all supported floating-point exceptions. Each macro
is only defined if it is supported. The macro constant FE_ALL_EXCEPT, which
expands to the bitwise OR of all other FE_*, is always defined and is zero if
floating-point exceptions are not supported by the implementation.

Each of the macro constants FE_DOWNWARD, FE_TONEAREST, FE_TOWARDZERO, and
FE_UPWARD expand to a nonnegative integer constant expression, which can be used
with fesetround and fegetround to indicate one of the supported floating-point
rounding modes. The implementation may define additional rounding mode constants
in <fenv.h>, which should all begin with FE_ followed by at least one uppercase
letter. Each macro is only defined if it is supported.

On most implementations, these macro constants expand to the values equal to the
values of `FLT_ROUNDS` and `float_round_style`.

Additional rounding modes may be supported by an implementation.

The current rounding mode affects the following:

[source,c]
----
double x = 1;

x/10; // 0.09999999999999999167332731531132594682276248931884765625
      // or 0.1000000000000000055511151231257827021181583404541015625

sqrt(2); // 1.41421356237309492343001693370752036571502685546875
         // or 1.4142135623730951454746218587388284504413604736328125

double d = 1 + DBL_EPSILON;
float f = d; //  1.00000000000000000000000
             // or 1.00000011920928955078125

strtof("0.1", NULL); // 0.0999999940395355224609375
                     // or 0.10000000149011611938476562

lrint(2.1); // 2 or 3
----

The current rounding mode does NOT affect the following:

* floating-point to integer implicit conversion and casts (always towards zero)
* results of floating-point arithmetic operators in constant expressions (always to nearest)
* the library functions round, lround, ceil, floor, trunc

As with any floating-point environment functionality, rounding is only
guaranteed if #pragma STDC FENV_ACCESS ON is set.

The macro constant FE_DFL_ENV expands to an expression of type `const fenv_t*`,
which points to a full copy of the default floating-point environment, that is,
the environment as loaded at program startup.

Additional macros that begin with FE_ followed by uppercase letters, and have
the type const `fenv_t*`, may be supported by an implementation.


EXAMPLE::

[source,c]
---------------------
include::src/fenv1.c[]
---------------------

OUTPUT::

.....
$ gcc -Wall fenv1.c 
$ ./a.out 
MATH_ERREXCEPT is set
0.0/0.0 = -nan
exceptions raised: FE_INVALID
1.0/0.0 = inf
exceptions raised: FE_DIVBYZERO
1.0/10.0 = 0.100000
exceptions raised:
sqrt(-1) = -nan
exceptions raised: FE_INVALID
DBL_MAX*2.0 = inf
exceptions raised: FE_INEXACT FE_OVERFLOW
nextafter(DBL_MIN/pow(2.0,52),0.0) = 0.0
exceptions raised: FE_INEXACT FE_UNDERFLOW
.....

EXAMPLE::

[source,c]
---------------------
include::src/fenv2.c[]
---------------------

OUTPUT::

.....
$ gcc -Wall fenv2.c 
$ ./a.out 
rounding down: 
           pi = 3.1415927410125732421875
strtof("1.1") = 1.0999999046325683593750
    rint(2.1) = 2.0000000000000000000000

rounding up: 
           pi = 3.1415927410125732421875
strtof("1.1") = 1.1000000238418579101563
    rint(2.1) = 3.0000000000000000000000
.....

EXAMPLE::

[source,c]
---------------------
include::src/fenv3.c[]
---------------------

OUTPUT::

.....
$ gcc -Wall fenv3.c 
$ ./a.out 
On startup:
current exceptions raised:  none
current rounding method:    FE_TONEAREST

Before restoration:
current exceptions raised:  FE_INVALID
current rounding method:    FE_DOWNWARD

After restoring default environment:
current exceptions raised:  FE_INVALID
current rounding method:    FE_TONEAREST
.....

